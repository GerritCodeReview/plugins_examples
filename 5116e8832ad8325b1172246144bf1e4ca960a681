{
  "comments": [
    {
      "key": {
        "uuid": "1240aa24_3c47511d",
        "filename": "example-patchSetEventListener/BUCK",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-11-07T10:34:48Z",
      "side": 1,
      "message": "Just for posterity: As already discussed in person, I don\u0027t think that we need BUCK or Maven support anymore. I understand the point, though, that the other example plugins have those files too and hence we shouldn\u0027t start to deviate with this plugin.",
      "revId": "5116e8832ad8325b1172246144bf1e4ca960a681",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "101cad64_92b5c4e4",
        "filename": "example-patchSetEventListener/WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-11-07T10:34:48Z",
      "side": 1,
      "message": "patchSetEventListener?",
      "range": {
        "startLine": 1,
        "startChar": 18,
        "endLine": 1,
        "endChar": 33
      },
      "revId": "5116e8832ad8325b1172246144bf1e4ca960a681",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b36af2c_62b44bed",
        "filename": "example-patchSetEventListener/src/main/java/com/googlesource/gerrit/plugins/examples/patchseteventlistener/PatchSetEventListener.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-11-07T10:34:48Z",
      "side": 1,
      "message": "For Gerrit core, we enforce a specific formatting with the google-java-format tool (see [1]). Even though we don\u0027t enforce this for plugins, it would still be nice if we tried to follow the same standards. Could you please reformat all touched files in this change with google-java-format?\n\n[1] https://gerrit-review.googlesource.com/Documentation/dev-contributing.html#style",
      "revId": "5116e8832ad8325b1172246144bf1e4ca960a681",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a4ca6f2_b1a38382",
        "filename": "example-patchSetEventListener/src/main/java/com/googlesource/gerrit/plugins/examples/patchseteventlistener/PatchSetEventListener.java",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-11-07T10:34:48Z",
      "side": 1,
      "message": "Did you deliberately choose to use EventListener and filter on PatchSetCreatedEvent instead of implementing RevisionCreatedListener? If so, why did you choose one approach over the other?\n\nI\u0027m just asking as I\u0027m curious. Both approaches are fine. They just have different intended uses. Depending on what this plugin should serve as an example, it might be better to deliberately choose one of them.",
      "range": {
        "startLine": 32,
        "startChar": 46,
        "endLine": 32,
        "endChar": 59
      },
      "revId": "5116e8832ad8325b1172246144bf1e4ca960a681",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0a14ad0_c8864664",
        "filename": "example-patchSetEventListener/src/main/java/com/googlesource/gerrit/plugins/examples/patchseteventlistener/PatchSetEventListener.java",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-11-07T10:34:48Z",
      "side": 1,
      "message": "This field is never used. Do we need it?",
      "range": {
        "startLine": 34,
        "startChar": 51,
        "endLine": 34,
        "endChar": 61
      },
      "revId": "5116e8832ad8325b1172246144bf1e4ca960a681",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92cd8050_2f6f1c94",
        "filename": "example-patchSetEventListener/src/main/java/com/googlesource/gerrit/plugins/examples/patchseteventlistener/PatchSetEventListener.java",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-11-07T10:34:48Z",
      "side": 1,
      "message": "We typically place this line in a separate block/line above custom fields of the class.",
      "revId": "5116e8832ad8325b1172246144bf1e4ca960a681",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3368820f_1922121e",
        "filename": "example-patchSetEventListener/src/main/java/com/googlesource/gerrit/plugins/examples/patchseteventlistener/PatchSetEventListener.java",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-11-07T10:34:48Z",
      "side": 1,
      "message": "Filtering on the value of the type field might be dangerous. Some reasons:\n- We do a cast in line 51. Such a cast is only appropriate if the code guarantees that it won\u0027t fail. Checking a possibly changing string isn\u0027t a strong guarantee.\n- The string value could possibly change in the future and we wouldn\u0027t notice it, especially since we hard code it.\n\nI would rather do an instanceof check instead.",
      "range": {
        "startLine": 48,
        "startChar": 10,
        "endLine": 48,
        "endChar": 59
      },
      "revId": "5116e8832ad8325b1172246144bf1e4ca960a681",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f56871e5_679ee62b",
        "filename": "example-patchSetEventListener/src/main/java/com/googlesource/gerrit/plugins/examples/patchseteventlistener/PatchSetEventListener.java",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-11-07T10:34:48Z",
      "side": 1,
      "message": "We typically use Guava\u0027s ImmutableXXX classes instead of similar ones from the collections framework. Here, we could use ImmutableMap#of. (I saw that we have the same code in RobotCommentsIT. Sadly, Gerrit\u0027s code base isn\u0027t perfect in that regard. Most of the time, we at least try to improve code we add or touch.)",
      "range": {
        "startLine": 63,
        "startChar": 10,
        "endLine": 63,
        "endChar": 34
      },
      "revId": "5116e8832ad8325b1172246144bf1e4ca960a681",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff00266d_2f43555e",
        "filename": "example-patchSetEventListener/src/main/java/com/googlesource/gerrit/plugins/examples/patchseteventlistener/PatchSetEventListener.java",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-11-07T10:34:48Z",
      "side": 1,
      "message": "The Change-Id isn\u0027t necessarily unique on a host. For tests, it\u0027s fine to look up changes with this approach but plugins should rather use a unique identifier. Possible options for change identifiers are mentioned at [1]. That documentation also recommends to use \u003cproject\u003e~\u003cnumericId\u003e, which is a unique identifier and also doesn\u0027t require an index lookup. When using the Java API, I would hence use Changes#id(String,int).\n\n[1] https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-id",
      "range": {
        "startLine": 67,
        "startChar": 36,
        "endLine": 67,
        "endChar": 57
      },
      "revId": "5116e8832ad8325b1172246144bf1e4ca960a681",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}