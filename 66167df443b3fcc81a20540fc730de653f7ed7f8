{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7bb06299_e08c6896",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T18:24:52Z",
      "side": 1,
      "message": "Thanks a lot for the example: it is now very clear to me how it works and is supposed to be used.\nI\u0027ll play with it tonight :-)",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f92d8ba6_72c01f3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T21:51:58Z",
      "side": 1,
      "message": "@Prudhvi: I tried hard to make it work locally, but it fails for me. Does it work on your environment?\n\nI get:\n1) No implementation for com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory (with no qualifier annotation) was bound, and could not find an injectable constructor. Injectable classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.\n  at com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory.class(Unknown Source)\n  while locating com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory\n\n1 error\n\tat com.google.inject.internal.InjectorImpl.getProvider(InjectorImpl.java:1120)\n\tat com.google.inject.internal.InjectorImpl.getProvider(InjectorImpl.java:1078)\n\tat com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1131)\n\tat com.google.gerrit.server.plugins.SharedPluginEnv.instantiate(SharedPluginEnv.java:123)\n\tat com.googlesource.gerrit.plugins.examples.pd.Modules$PdFactory.createPluginDefinedInfos(Modules.java:70)\n",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "365f13c7_48a9c868",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-20T12:20:13Z",
      "side": 1,
      "message": "\u003e Does it work on your environment?\nYes, it is working on my local test site. I have debugged it and verified. I\u0027m also printing a statement in DependencyResolverImpl.java which is showing up in the logs without any errors.. \n\n[2021-03-20T17:07:21.193+05:30] [SSH gerrit query --example-pd--resolve-depends-on change:27 (prudhvi)] ERROR com.googlesource.gerrit.plugins.examples.dependson.DependencyResolverImpl : Inside resolveDependencies, change: 27, 1 deliverables size: 0\n\n\u003e I tried hard to make it work locally, but it fails for me.\nSorry to hear that... I have built the example jars with Java 11 and with \"mvn clean package\" instead of bazel. (this may not help if you are already building it with mvn). I\u0027m running test site with java 11 and I did not test this setup with higher java versions.\n\n\u003e I get:\n\u003e 1) No implementation for com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory (with no qualifier annotation) was bound, and could not find an injectable constructor. Injectable classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.\n\nLooking at the error, I think it was able to load the class from the merged class loader, since it is trying to instantiate the loaded class from the injector. Looks like the injector was not able to find a valid constructor for PdAttributeFactory, \n\nI think the injector which is trying to instantiate the class is not example-pd\u0027s injector .? (which is not possible if you are using the code as is)\n\nNot sure what it means by \"(with no qualifier annotation) was bound\" in this situation. \n\n\"and could not find an injectable constructor\" which is *not* true, we do have an injectable constructor which is public.\n\nCan you share your environment info..? (java version, how the jars are built)\nCan you kindly let me know if any of this explanation helped you run this setup without errors..?",
      "parentUuid": "f92d8ba6_72c01f3b",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "481fc955_5407b745",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-20T12:28:52Z",
      "side": 1,
      "message": "Working on my local setup.\n\nTest performed: \nrun ssh command, ssh -x -p 29418 localhost gerrit query --example-pd--resolve-depends-on change:27\n\nyou will see the following log entry in the error_log without any errors,\n[2021-03-20T17:07:21.193+05:30] [SSH gerrit query --example-pd--resolve-depends-on change:27 (prudhvi)] ERROR com.googlesource.gerrit.plugins.examples.dependson.DependencyResolverImpl : Inside resolveDependencies, change: 27, 1 deliverables size: 0\n\nAlso, example-pd plugin will output below message in respective plugin section,\n\nplugins:\n    name: example-pd\n    message: Ran dependency resolver\n\nTest site setup:\nJava version: 11\nWar version: https://gerrit-review.googlesource.com/c/gerrit/+/300363\nWar build command: bazel build gerrit\nexample plugins build command: mvn clean package\nSystem OS: macOS Big Sur 11.2.2\nPlugins installed: example-depends-on.jar, example-pd.jar\n\n\n",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6cb7853_99b6c9db",
        "filename": "example-depends-on/src/main/java/com/googlesource/gerrit/plugins/examples/dependson/extensions/DependencyResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T18:24:52Z",
      "side": 1,
      "message": "This interface is duplicated between the two plugins (examples-depends-on and examples-pd): is this by design?",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57318e40_34cef7a0",
        "filename": "example-depends-on/src/main/java/com/googlesource/gerrit/plugins/examples/dependson/extensions/DependencyResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-20T12:20:13Z",
      "side": 1,
      "message": "Yes, the interface needs to be shared between two plugins, so that the API consuming plugin can type cast to it and access respective APIs. Also it is being shared through a symbolic link in this example.",
      "parentUuid": "d6cb7853_99b6c9db",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ee8e081_a5f82ef1",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T18:24:52Z",
      "side": 1,
      "message": "I see: you have the com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory Class in the plugin class loader, however, it isn\u0027t loaded with the dependency on the other plugin and therefore isn\u0027t usable as-is.\n\nBy passing the class name as a String (instead of a Class) you then create a merged class loader and ask to reload the class *again* so that it can be resolved against the two plugins class loaders.\n\nAt the end you cast the result onto an interface known to Gerrit that is parent of both classes (the original PdAttributeFactory and the reloaded PdAttributeFactory from the merged class loader).\n\nIs my understanding correct on why you specify a class by name and not by passing the actual Class object?",
      "range": {
        "startLine": 69,
        "startChar": 33,
        "endLine": 69,
        "endChar": 97
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b42d7391_97f746de",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T21:51:58Z",
      "side": 1,
      "message": "There is a dangerous side-effect in instantiating the object in this way: every method invocation would result in creating a brand-new class in memory.\n\nI tried printing them out:\n- id of PdAttributeFactory (from the plugin\u0027s class loader)\n  Class PdAttributeFactory \u003d 1257474952\n- id of PdAttributesFactory (for 2 different instantiations)\n  Class PdAttributeFactory \u003d 775894354\n  Class PdAttributeFactory \u003d 1220390123\n\nHave you checked that you won\u0027t risk to overflow the meta-space in this way?\nThat is actually one of the problems we faced when I introduced the Gerrit plugin loader: we got so much used to its dynamic loading/reloading mechanism, that we were quickly breaking the Gerrit meta-space (PermGen at that time, we were on Java 7 back in 2012).",
      "parentUuid": "2ee8e081_a5f82ef1",
      "range": {
        "startLine": 69,
        "startChar": 33,
        "endLine": 69,
        "endChar": 97
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9b035e5_38f9a608",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T18:24:52Z",
      "side": 1,
      "message": "This is the graceful failure if the other plugin doesn\u0027t exist or the class is not there, correct?",
      "range": {
        "startLine": 72,
        "startChar": 8,
        "endLine": 72,
        "endChar": 34
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9317494f_6f0f4b82",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-20T12:20:13Z",
      "side": 1,
      "message": "Yes, I believe the user can decide on how he wants to handle these exceptions based on the severity of the operation he is performing.\n\nAlso the user can perform error handling while he is trying to fetch the respective API from the other plugin (i.e., when pluginProvidedApis.get(Modules.DEPENDS_ON_PLUGIN, \"DependencyResolver\")).",
      "parentUuid": "a9b035e5_38f9a608",
      "range": {
        "startLine": 72,
        "startChar": 8,
        "endLine": 72,
        "endChar": 34
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}