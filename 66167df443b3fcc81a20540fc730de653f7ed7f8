{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7bb06299_e08c6896",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T18:24:52Z",
      "side": 1,
      "message": "Thanks a lot for the example: it is now very clear to me how it works and is supposed to be used.\nI\u0027ll play with it tonight :-)",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f92d8ba6_72c01f3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T21:51:58Z",
      "side": 1,
      "message": "@Prudhvi: I tried hard to make it work locally, but it fails for me. Does it work on your environment?\n\nI get:\n1) No implementation for com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory (with no qualifier annotation) was bound, and could not find an injectable constructor. Injectable classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.\n  at com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory.class(Unknown Source)\n  while locating com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory\n\n1 error\n\tat com.google.inject.internal.InjectorImpl.getProvider(InjectorImpl.java:1120)\n\tat com.google.inject.internal.InjectorImpl.getProvider(InjectorImpl.java:1078)\n\tat com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1131)\n\tat com.google.gerrit.server.plugins.SharedPluginEnv.instantiate(SharedPluginEnv.java:123)\n\tat com.googlesource.gerrit.plugins.examples.pd.Modules$PdFactory.createPluginDefinedInfos(Modules.java:70)\n",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "365f13c7_48a9c868",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-20T12:20:13Z",
      "side": 1,
      "message": "\u003e Does it work on your environment?\nYes, it is working on my local test site. I have debugged it and verified. I\u0027m also printing a statement in DependencyResolverImpl.java which is showing up in the logs without any errors.. \n\n[2021-03-20T17:07:21.193+05:30] [SSH gerrit query --example-pd--resolve-depends-on change:27 (prudhvi)] ERROR com.googlesource.gerrit.plugins.examples.dependson.DependencyResolverImpl : Inside resolveDependencies, change: 27, 1 deliverables size: 0\n\n\u003e I tried hard to make it work locally, but it fails for me.\nSorry to hear that... I have built the example jars with Java 11 and with \"mvn clean package\" instead of bazel. (this may not help if you are already building it with mvn). I\u0027m running test site with java 11 and I did not test this setup with higher java versions.\n\n\u003e I get:\n\u003e 1) No implementation for com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory (with no qualifier annotation) was bound, and could not find an injectable constructor. Injectable classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.\n\nLooking at the error, I think it was able to load the class from the merged class loader, since it is trying to instantiate the loaded class from the injector. Looks like the injector was not able to find a valid constructor for PdAttributeFactory, \n\nI think the injector which is trying to instantiate the class is not example-pd\u0027s injector .? (which is not possible if you are using the code as is)\n\nNot sure what it means by \"(with no qualifier annotation) was bound\" in this situation. \n\n\"and could not find an injectable constructor\" which is *not* true, we do have an injectable constructor which is public.\n\nCan you share your environment info..? (java version, how the jars are built)\nCan you kindly let me know if any of this explanation helped you run this setup without errors..?",
      "parentUuid": "f92d8ba6_72c01f3b",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "481fc955_5407b745",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-20T12:28:52Z",
      "side": 1,
      "message": "Working on my local setup.\n\nTest performed: \nrun ssh command, ssh -x -p 29418 localhost gerrit query --example-pd--resolve-depends-on change:27\n\nyou will see the following log entry in the error_log without any errors,\n[2021-03-20T17:07:21.193+05:30] [SSH gerrit query --example-pd--resolve-depends-on change:27 (prudhvi)] ERROR com.googlesource.gerrit.plugins.examples.dependson.DependencyResolverImpl : Inside resolveDependencies, change: 27, 1 deliverables size: 0\n\nAlso, example-pd plugin will output below message in respective plugin section,\n\nplugins:\n    name: example-pd\n    message: Ran dependency resolver\n\nTest site setup:\nJava version: 11\nWar version: https://gerrit-review.googlesource.com/c/gerrit/+/300363\nWar build command: bazel build gerrit\nexample plugins build command: mvn clean package\nSystem OS: macOS Big Sur 11.2.2\nPlugins installed: example-depends-on.jar, example-pd.jar\n\n\n",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96869be0_f775e112",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-20T22:11:35Z",
      "side": 1,
      "message": "\u003e Working on my local setup.\n\nCan you also try from Eclipse?\nI found out that the problems happens ONLY when you run Gerrit from Eclipse, but if I run it from gerrit.sh it works.\n\nWhen you run from Eclipse the class loaders are slightly different, and possibly the magic done for the request-based reloading of the class isn\u0027t working quite right.",
      "parentUuid": "481fc955_5407b745",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9c7ba06_860b0c56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-21T23:41:46Z",
      "side": 1,
      "message": "I keep of finding bad surprises :-(\nCan you check if you get the same results?",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81a9fb99_c7b8d6e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-21T23:43:05Z",
      "side": 1,
      "message": "There are inconsistencies on how this works inside and outside Eclipse. Also, this solution generates paradox like PdAttributeFactory cannot be cast to a PdAttributeFactory ðŸ˜®",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e8de804_625bd329",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-22T00:40:47Z",
      "side": 1,
      "message": "After having played with it, I believe I grasped the overall logic of the approach, but *please* correct me if I am wrong or have misunderstood anything.\n\n1. The two plugins are loaded *independently* with two different injectors and independent class loaders.\n\n2. If example-pd wants to invoke a method of example-depends-on, needs to *reload itself* by mixing its class-loader with the one of example-depends-on, resulting in a \"temporary new plugin\" with other classes obtained with the mixing of the two plugins context.\n\n3. The point 2. creates the paradox that PdAttributeFactory (new plugin\u0027s classes loaded with the mixed class-loader) cannot be casted to PdAttributeFactory (the current plugin with independent class-loader).\n\n4. The two classes (PdAttributeFactory-mixed and PdAttributeFactory-independent) can still be used together when they are casted to a super-class that is contained in Gerrit core.\n\n5. The new mixed class-loader plugin exists only for the duration of the API call and then is left to the JVM to be garbage collected.\n\n6. Every invocation creates a mixed class-loader and a new definition of PdAttributeFactory-mixed class.\n\n7. The meta-space would eventually collapse as the PdAttributeFactory classes will be created and loaded over and over again.\n\nIs any of the above incorrect? Can you provide your view on them?",
      "parentUuid": "81a9fb99_c7b8d6e3",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf6b231b_0a24d856",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-23T06:10:55Z",
      "side": 1,
      "message": "\u003e 1. The two plugins are loaded *independently* with two different injectors and independent class loaders.\nTrue.\n\n\u003e 2. If example-pd wants to invoke a method of example-depends-on, needs to *reload itself* by mixing its class-loader with the one of example-depends-on, resulting in a \"temporary new plugin\" with other classes obtained with the mixing of the two plugins context.\nYes, but the part where you mentioned \"needs to *reload itself*\", might not be true as the class PdAttributeFactory is never loaded in example-pd plugin since it is not mentioned anywhere in the example-pd module.\n\n\u003e 3. The point 2. creates the paradox that PdAttributeFactory (new plugin\u0027s classes loaded with the mixed class-loader) cannot be casted to PdAttributeFactory (the current plugin with independent class-loader).\nI believe that is the intent of the design that PdAttributeFactory is never loaded by example-pd plugin and always gets loaded in a temporary shared plugin environment.\n\n\u003e 4. The two classes (PdAttributeFactory-mixed and PdAttributeFactory-independent) can still be used together when they are casted to a super-class that is contained in Gerrit core.\nTrue, but we believe there could be potential miss understanding here. The reason why we are using ChangePluginDefinedInfoFactory is to have a common interface between the current plugin and the temporary plugin, and the common interface *need not* be known to core. In other words we could potentially have an interface which is known to the current plugin and the temporary plugin and the whole setup would still work.\n\n\n\u003e 5. The new mixed class-loader plugin exists only for the duration of the API call and then is left to the JVM to be garbage collected.\nTrue.\n\n\u003e 6. Every invocation creates a mixed class-loader and a new definition of PdAttributeFactory-mixed class.\nNot true. We have a caching mechanism in place which would cache the mixed class loader and returns that class loader unless it is garbage collected. A new definition of the PdAttributeFactory-mixed class is not created always, since the cached mixed class loader would already have the class loaded so it won\u0027t try to load it again.\n\n\u003e 7. The meta-space would eventually collapse as the PdAttributeFactory classes will be created and loaded over and over again.\nNot true. We don\u0027t see a reason why this will happen if we handle the leaks in the right manner. Adding to that, we have similar \"weak reference caching\" of mixed class loaders in production and is working without any issues.",
      "parentUuid": "9e8de804_625bd329",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "854e18ae_d63af777",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-23T06:10:55Z",
      "side": 1,
      "message": "\u003e Can you also try from Eclipse?\nI\u0027m not sure how to run Gerrit with Eclipse. Need to check on that. Do we have a document which formally supports running Gerrit server from Eclipse.?",
      "parentUuid": "96869be0_f775e112",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6cb7853_99b6c9db",
        "filename": "example-depends-on/src/main/java/com/googlesource/gerrit/plugins/examples/dependson/extensions/DependencyResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T18:24:52Z",
      "side": 1,
      "message": "This interface is duplicated between the two plugins (examples-depends-on and examples-pd): is this by design?",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57318e40_34cef7a0",
        "filename": "example-depends-on/src/main/java/com/googlesource/gerrit/plugins/examples/dependson/extensions/DependencyResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-20T12:20:13Z",
      "side": 1,
      "message": "Yes, the interface needs to be shared between two plugins, so that the API consuming plugin can type cast to it and access respective APIs. Also it is being shared through a symbolic link in this example.",
      "parentUuid": "d6cb7853_99b6c9db",
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dabf3710_2f3dbf1d",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-21T23:41:46Z",
      "side": 1,
      "message": "There is a type-safety warning here, as you don\u0027t have a compiler type checking that what is returned by the instantiate method *is actually* of a subtype of ChangePluginDefinedInfoFactory.\n\nWhat is really surprising is that casting to com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory would even generate a class cast exception :-O\n\nSee below what happens if you do it:\n\njava.lang.ClassCastException: class com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory cannot be cast to class com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory (com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory is in unnamed module of loader com.google.gerrit.server.plugins.DelegatingClassLoader @48267c67; com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory is in unnamed module of loader java.net.FactoryURLClassLoader @7f0b2bf1)\n\nI believe that is a symptom that what we are doing here is still quite fragile.",
      "range": {
        "startLine": 64,
        "startChar": 8,
        "endLine": 65,
        "endChar": 44
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9203b05_4e55030e",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-23T06:10:55Z",
      "side": 1,
      "message": "\u003e What is really surprising is that casting to com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory would even generate a class cast exception :-O\nYes, we expect that to happen, as the PdAttributeFactory class loaded by temporary plugin and the current plugin are different as their class loaders are different. Thus we expect the casting to fail.",
      "parentUuid": "dabf3710_2f3dbf1d",
      "range": {
        "startLine": 64,
        "startChar": 8,
        "endLine": 65,
        "endChar": 44
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ee8e081_a5f82ef1",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T18:24:52Z",
      "side": 1,
      "message": "I see: you have the com.googlesource.gerrit.plugins.examples.pd.PdAttributeFactory Class in the plugin class loader, however, it isn\u0027t loaded with the dependency on the other plugin and therefore isn\u0027t usable as-is.\n\nBy passing the class name as a String (instead of a Class) you then create a merged class loader and ask to reload the class *again* so that it can be resolved against the two plugins class loaders.\n\nAt the end you cast the result onto an interface known to Gerrit that is parent of both classes (the original PdAttributeFactory and the reloaded PdAttributeFactory from the merged class loader).\n\nIs my understanding correct on why you specify a class by name and not by passing the actual Class object?",
      "range": {
        "startLine": 69,
        "startChar": 33,
        "endLine": 69,
        "endChar": 97
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b42d7391_97f746de",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T21:51:58Z",
      "side": 1,
      "message": "There is a dangerous side-effect in instantiating the object in this way: every method invocation would result in creating a brand-new class in memory.\n\nI tried printing them out:\n- id of PdAttributeFactory (from the plugin\u0027s class loader)\n  Class PdAttributeFactory \u003d 1257474952\n- id of PdAttributesFactory (for 2 different instantiations)\n  Class PdAttributeFactory \u003d 775894354\n  Class PdAttributeFactory \u003d 1220390123\n\nHave you checked that you won\u0027t risk to overflow the meta-space in this way?\nThat is actually one of the problems we faced when I introduced the Gerrit plugin loader: we got so much used to its dynamic loading/reloading mechanism, that we were quickly breaking the Gerrit meta-space (PermGen at that time, we were on Java 7 back in 2012).",
      "parentUuid": "2ee8e081_a5f82ef1",
      "range": {
        "startLine": 69,
        "startChar": 33,
        "endLine": 69,
        "endChar": 97
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67971844_7bbdc117",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-23T06:10:55Z",
      "side": 1,
      "message": "\u003e every method invocation would result in creating a brand-new class in memory.\nWe believe that caching should have taken care of this scenario, if it is not, it might be a bug or the mixed class loader got garbage collected.\n\n\u003e Have you checked that you won\u0027t risk to overflow the meta-space in this way?\nNeed to test it for this code. But we believe this should not happen if we code the caching right and without any leaks. We have similar \"weak reference caching\" of mixed class loaders in production and is working without any issues.",
      "parentUuid": "b42d7391_97f746de",
      "range": {
        "startLine": 69,
        "startChar": 33,
        "endLine": 69,
        "endChar": 97
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9b035e5_38f9a608",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T18:24:52Z",
      "side": 1,
      "message": "This is the graceful failure if the other plugin doesn\u0027t exist or the class is not there, correct?",
      "range": {
        "startLine": 72,
        "startChar": 8,
        "endLine": 72,
        "endChar": 34
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9317494f_6f0f4b82",
        "filename": "example-pd/src/main/java/com/googlesource/gerrit/plugins/examples/pd/Modules.java",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-03-20T12:20:13Z",
      "side": 1,
      "message": "Yes, I believe the user can decide on how he wants to handle these exceptions based on the severity of the operation he is performing.\n\nAlso the user can perform error handling while he is trying to fetch the respective API from the other plugin (i.e., when pluginProvidedApis.get(Modules.DEPENDS_ON_PLUGIN, \"DependencyResolver\")).",
      "parentUuid": "a9b035e5_38f9a608",
      "range": {
        "startLine": 72,
        "startChar": 8,
        "endLine": 72,
        "endChar": 34
      },
      "revId": "66167df443b3fcc81a20540fc730de653f7ed7f8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}